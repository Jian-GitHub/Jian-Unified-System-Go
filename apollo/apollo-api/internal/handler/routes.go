// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5

package handler

import (
	"net/http"

	account "jian-unified-system/apollo/apollo-api/internal/handler/account"
	passkeys "jian-unified-system/apollo/apollo-api/internal/handler/passkeys"
	thirdParty "jian-unified-system/apollo/apollo-api/internal/handler/thirdParty"
	"jian-unified-system/apollo/apollo-api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: account.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/registration",
				Handler: account.RegHandler(serverCtx),
			},
		},
		rest.WithPrefix("/v1/account"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/VerifyToken",
				Handler: account.VerifyTokenHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/v1/account"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/login/finish",
				Handler: passkeys.LoginFinishHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/login/start",
				Handler: passkeys.LoginStartHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/registration/finish",
				Handler: passkeys.RegFinishHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/registration/start",
				Handler: passkeys.RegStartHandler(serverCtx),
			},
		},
		rest.WithPrefix("/v1/passkeys"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/Callback/:provider",
				Handler: thirdParty.CallbackHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/Continue",
				Handler: thirdParty.ContinueHandler(serverCtx),
			},
		},
		rest.WithPrefix("/v1/thirdParty"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/BindReq",
				Handler: thirdParty.BindHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/v1/thirdParty"),
	)
}
