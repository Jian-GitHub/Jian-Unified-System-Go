// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	authenticatorFieldNames          = builder.RawFieldNames(&Authenticator{})
	authenticatorRows                = strings.Join(authenticatorFieldNames, ",")
	authenticatorRowsExpectAutoSet   = strings.Join(stringx.Remove(authenticatorFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	authenticatorRowsWithPlaceHolder = strings.Join(stringx.Remove(authenticatorFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheApolloAuthenticatorIdPrefix = "cache:apollo:authenticator:id:"
)

type (
	authenticatorModel interface {
		Insert(ctx context.Context, data *Authenticator) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Authenticator, error)
		Update(ctx context.Context, data *Authenticator) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAuthenticatorModel struct {
		sqlc.CachedConn
		table string
	}

	Authenticator struct {
		Id           int64          `db:"id"`            // 设备ID
		Aaguid       sql.NullString `db:"aaguid"`        // 认证器GUID
		SignCount    int64          `db:"sign_count"`    // 签名计数器（防重放）
		CredentialId string         `db:"credential_id"` // 凭证ID
		PublicKey    string         `db:"public_key"`    // 公钥
		PasskeysId   int64          `db:"passkeys_id"`   // 关联通行密钥ID
		UserId       int64          `db:"user_id"`       // 关联用户ID
		CreateTime   time.Time      `db:"create_time"`   // 创建时间
		Mark         sql.NullString `db:"mark"`          // 备注
	}
)

func newAuthenticatorModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultAuthenticatorModel {
	return &defaultAuthenticatorModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`authenticator`",
	}
}

func (m *defaultAuthenticatorModel) Delete(ctx context.Context, id int64) error {
	apolloAuthenticatorIdKey := fmt.Sprintf("%s%v", cacheApolloAuthenticatorIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, apolloAuthenticatorIdKey)
	return err
}

func (m *defaultAuthenticatorModel) FindOne(ctx context.Context, id int64) (*Authenticator, error) {
	apolloAuthenticatorIdKey := fmt.Sprintf("%s%v", cacheApolloAuthenticatorIdPrefix, id)
	var resp Authenticator
	err := m.QueryRowCtx(ctx, &resp, apolloAuthenticatorIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", authenticatorRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAuthenticatorModel) Insert(ctx context.Context, data *Authenticator) (sql.Result, error) {
	apolloAuthenticatorIdKey := fmt.Sprintf("%s%v", cacheApolloAuthenticatorIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, authenticatorRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Aaguid, data.SignCount, data.CredentialId, data.PublicKey, data.PasskeysId, data.UserId, data.Mark)
	}, apolloAuthenticatorIdKey)
	return ret, err
}

func (m *defaultAuthenticatorModel) Update(ctx context.Context, data *Authenticator) error {
	apolloAuthenticatorIdKey := fmt.Sprintf("%s%v", cacheApolloAuthenticatorIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, authenticatorRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Aaguid, data.SignCount, data.CredentialId, data.PublicKey, data.PasskeysId, data.UserId, data.Mark, data.Id)
	}, apolloAuthenticatorIdKey)
	return err
}

func (m *defaultAuthenticatorModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheApolloAuthenticatorIdPrefix, primary)
}

func (m *defaultAuthenticatorModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", authenticatorRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAuthenticatorModel) tableName() string {
	return m.table
}
