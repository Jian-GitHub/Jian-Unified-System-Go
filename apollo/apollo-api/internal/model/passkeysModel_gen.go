// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	passkeysFieldNames          = builder.RawFieldNames(&Passkeys{})
	passkeysRows                = strings.Join(passkeysFieldNames, ",")
	passkeysRowsExpectAutoSet   = strings.Join(stringx.Remove(passkeysFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	passkeysRowsWithPlaceHolder = strings.Join(stringx.Remove(passkeysFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheApolloPasskeysIdPrefix = "cache:apollo:passkeys:id:"
)

type (
	passkeysModel interface {
		Insert(ctx context.Context, data *Passkeys) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Passkeys, error)
		Update(ctx context.Context, data *Passkeys) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPasskeysModel struct {
		sqlc.CachedConn
		table string
	}

	Passkeys struct {
		Id          int64          `db:"id"`           // 自增主键
		Username    sql.NullString `db:"username"`     // 用户名
		DisplayName sql.NullString `db:"display_name"` // 显示名称
		Handle      sql.NullString `db:"handle"`       // WebAuthn用户句柄
		UserId      int64          `db:"user_id"`      // 关联用户ID
		CreateTime  time.Time      `db:"create_time"`  // 创建时间
	}
)

func newPasskeysModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultPasskeysModel {
	return &defaultPasskeysModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`passkeys`",
	}
}

func (m *defaultPasskeysModel) Delete(ctx context.Context, id int64) error {
	apolloPasskeysIdKey := fmt.Sprintf("%s%v", cacheApolloPasskeysIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, apolloPasskeysIdKey)
	return err
}

func (m *defaultPasskeysModel) FindOne(ctx context.Context, id int64) (*Passkeys, error) {
	apolloPasskeysIdKey := fmt.Sprintf("%s%v", cacheApolloPasskeysIdPrefix, id)
	var resp Passkeys
	err := m.QueryRowCtx(ctx, &resp, apolloPasskeysIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", passkeysRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPasskeysModel) Insert(ctx context.Context, data *Passkeys) (sql.Result, error) {
	apolloPasskeysIdKey := fmt.Sprintf("%s%v", cacheApolloPasskeysIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, passkeysRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Username, data.DisplayName, data.Handle, data.UserId)
	}, apolloPasskeysIdKey)
	return ret, err
}

func (m *defaultPasskeysModel) Update(ctx context.Context, data *Passkeys) error {
	apolloPasskeysIdKey := fmt.Sprintf("%s%v", cacheApolloPasskeysIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, passkeysRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Username, data.DisplayName, data.Handle, data.UserId, data.Id)
	}, apolloPasskeysIdKey)
	return err
}

func (m *defaultPasskeysModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheApolloPasskeysIdPrefix, primary)
}

func (m *defaultPasskeysModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", passkeysRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultPasskeysModel) tableName() string {
	return m.table
}
