// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: apollo-rpc.proto

package apollo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Account_Registration_FullMethodName     = "/apollo.Account/Registration"
	Account_Login_FullMethodName            = "/apollo.Account/Login"
	Account_UserInfo_FullMethodName         = "/apollo.Account/UserInfo"
	Account_UserSecurityInfo_FullMethodName = "/apollo.Account/UserSecurityInfo"
)

// AccountClient is the client API for Account service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ================= 服务定义 =================
type AccountClient interface {
	// 注册
	// Registration 注册
	Registration(ctx context.Context, in *RegistrationReq, opts ...grpc.CallOption) (*Empty, error)
	// 登录
	// Login 登陆
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	// 用户信息
	// UserInfo 查询用户通知联系方式
	UserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error)
	// 用户安全信息
	// UserSecurityInfo 查询用户通知联系方式
	UserSecurityInfo(ctx context.Context, in *UserSecurityInfoReq, opts ...grpc.CallOption) (*UserSecurityInfoResp, error)
}

type accountClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountClient(cc grpc.ClientConnInterface) AccountClient {
	return &accountClient{cc}
}

func (c *accountClient) Registration(ctx context.Context, in *RegistrationReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Account_Registration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, Account_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) UserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserInfoResp)
	err := c.cc.Invoke(ctx, Account_UserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) UserSecurityInfo(ctx context.Context, in *UserSecurityInfoReq, opts ...grpc.CallOption) (*UserSecurityInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserSecurityInfoResp)
	err := c.cc.Invoke(ctx, Account_UserSecurityInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServer is the server API for Account service.
// All implementations must embed UnimplementedAccountServer
// for forward compatibility.
//
// ================= 服务定义 =================
type AccountServer interface {
	// 注册
	// Registration 注册
	Registration(context.Context, *RegistrationReq) (*Empty, error)
	// 登录
	// Login 登陆
	Login(context.Context, *LoginReq) (*LoginResp, error)
	// 用户信息
	// UserInfo 查询用户通知联系方式
	UserInfo(context.Context, *UserInfoReq) (*UserInfoResp, error)
	// 用户安全信息
	// UserSecurityInfo 查询用户通知联系方式
	UserSecurityInfo(context.Context, *UserSecurityInfoReq) (*UserSecurityInfoResp, error)
	mustEmbedUnimplementedAccountServer()
}

// UnimplementedAccountServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAccountServer struct{}

func (UnimplementedAccountServer) Registration(context.Context, *RegistrationReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Registration not implemented")
}
func (UnimplementedAccountServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAccountServer) UserInfo(context.Context, *UserInfoReq) (*UserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfo not implemented")
}
func (UnimplementedAccountServer) UserSecurityInfo(context.Context, *UserSecurityInfoReq) (*UserSecurityInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSecurityInfo not implemented")
}
func (UnimplementedAccountServer) mustEmbedUnimplementedAccountServer() {}
func (UnimplementedAccountServer) testEmbeddedByValue()                 {}

// UnsafeAccountServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServer will
// result in compilation errors.
type UnsafeAccountServer interface {
	mustEmbedUnimplementedAccountServer()
}

func RegisterAccountServer(s grpc.ServiceRegistrar, srv AccountServer) {
	// If the following call pancis, it indicates UnimplementedAccountServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Account_ServiceDesc, srv)
}

func _Account_Registration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).Registration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Account_Registration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).Registration(ctx, req.(*RegistrationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Account_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_UserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).UserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Account_UserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).UserInfo(ctx, req.(*UserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_UserSecurityInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSecurityInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).UserSecurityInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Account_UserSecurityInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).UserSecurityInfo(ctx, req.(*UserSecurityInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Account_ServiceDesc is the grpc.ServiceDesc for Account service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Account_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apollo.Account",
	HandlerType: (*AccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Registration",
			Handler:    _Account_Registration_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Account_Login_Handler,
		},
		{
			MethodName: "UserInfo",
			Handler:    _Account_UserInfo_Handler,
		},
		{
			MethodName: "UserSecurityInfo",
			Handler:    _Account_UserSecurityInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apollo-rpc.proto",
}

const (
	Passkeys_StartRegistration_FullMethodName  = "/apollo.Passkeys/StartRegistration"
	Passkeys_FinishRegistration_FullMethodName = "/apollo.Passkeys/FinishRegistration"
	Passkeys_StartLogin_FullMethodName         = "/apollo.Passkeys/StartLogin"
	Passkeys_FinishLogin_FullMethodName        = "/apollo.Passkeys/FinishLogin"
	Passkeys_FindTenPasskeys_FullMethodName    = "/apollo.Passkeys/FindTenPasskeys"
	Passkeys_RemovePasskey_FullMethodName      = "/apollo.Passkeys/RemovePasskey"
)

// PasskeysClient is the client API for Passkeys service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ================= 服务定义 =================
type PasskeysClient interface {
	// 注册
	// StartRegistration 注册第一步 - 开始
	StartRegistration(ctx context.Context, in *PasskeysStartRegistrationReq, opts ...grpc.CallOption) (*PasskeysStartRegistrationResp, error)
	// FinishRegistration 注册第二步 - 完成
	FinishRegistration(ctx context.Context, in *PasskeysFinishRegistrationReq, opts ...grpc.CallOption) (*PasskeysFinishRegistrationResp, error)
	// 登录
	// StartLogin 登陆第一步 - 开始
	StartLogin(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PasskeysStartLoginResp, error)
	// FinishLogin 登陆第二步 - 完成 返回用户id
	FinishLogin(ctx context.Context, in *PasskeysFinishLoginReq, opts ...grpc.CallOption) (*PasskeysFinishLoginResp, error)
	// FindTenPasskeys 查询 10 个Passkeys
	FindTenPasskeys(ctx context.Context, in *FindTenPasskeysReq, opts ...grpc.CallOption) (*FindTenPasskeysResp, error)
	// RemovePasskey 移除 Passkey
	RemovePasskey(ctx context.Context, in *RemovePasskeyReq, opts ...grpc.CallOption) (*RemovePasskeyResp, error)
}

type passkeysClient struct {
	cc grpc.ClientConnInterface
}

func NewPasskeysClient(cc grpc.ClientConnInterface) PasskeysClient {
	return &passkeysClient{cc}
}

func (c *passkeysClient) StartRegistration(ctx context.Context, in *PasskeysStartRegistrationReq, opts ...grpc.CallOption) (*PasskeysStartRegistrationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PasskeysStartRegistrationResp)
	err := c.cc.Invoke(ctx, Passkeys_StartRegistration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passkeysClient) FinishRegistration(ctx context.Context, in *PasskeysFinishRegistrationReq, opts ...grpc.CallOption) (*PasskeysFinishRegistrationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PasskeysFinishRegistrationResp)
	err := c.cc.Invoke(ctx, Passkeys_FinishRegistration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passkeysClient) StartLogin(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PasskeysStartLoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PasskeysStartLoginResp)
	err := c.cc.Invoke(ctx, Passkeys_StartLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passkeysClient) FinishLogin(ctx context.Context, in *PasskeysFinishLoginReq, opts ...grpc.CallOption) (*PasskeysFinishLoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PasskeysFinishLoginResp)
	err := c.cc.Invoke(ctx, Passkeys_FinishLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passkeysClient) FindTenPasskeys(ctx context.Context, in *FindTenPasskeysReq, opts ...grpc.CallOption) (*FindTenPasskeysResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindTenPasskeysResp)
	err := c.cc.Invoke(ctx, Passkeys_FindTenPasskeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passkeysClient) RemovePasskey(ctx context.Context, in *RemovePasskeyReq, opts ...grpc.CallOption) (*RemovePasskeyResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemovePasskeyResp)
	err := c.cc.Invoke(ctx, Passkeys_RemovePasskey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PasskeysServer is the server API for Passkeys service.
// All implementations must embed UnimplementedPasskeysServer
// for forward compatibility.
//
// ================= 服务定义 =================
type PasskeysServer interface {
	// 注册
	// StartRegistration 注册第一步 - 开始
	StartRegistration(context.Context, *PasskeysStartRegistrationReq) (*PasskeysStartRegistrationResp, error)
	// FinishRegistration 注册第二步 - 完成
	FinishRegistration(context.Context, *PasskeysFinishRegistrationReq) (*PasskeysFinishRegistrationResp, error)
	// 登录
	// StartLogin 登陆第一步 - 开始
	StartLogin(context.Context, *Empty) (*PasskeysStartLoginResp, error)
	// FinishLogin 登陆第二步 - 完成 返回用户id
	FinishLogin(context.Context, *PasskeysFinishLoginReq) (*PasskeysFinishLoginResp, error)
	// FindTenPasskeys 查询 10 个Passkeys
	FindTenPasskeys(context.Context, *FindTenPasskeysReq) (*FindTenPasskeysResp, error)
	// RemovePasskey 移除 Passkey
	RemovePasskey(context.Context, *RemovePasskeyReq) (*RemovePasskeyResp, error)
	mustEmbedUnimplementedPasskeysServer()
}

// UnimplementedPasskeysServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPasskeysServer struct{}

func (UnimplementedPasskeysServer) StartRegistration(context.Context, *PasskeysStartRegistrationReq) (*PasskeysStartRegistrationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRegistration not implemented")
}
func (UnimplementedPasskeysServer) FinishRegistration(context.Context, *PasskeysFinishRegistrationReq) (*PasskeysFinishRegistrationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishRegistration not implemented")
}
func (UnimplementedPasskeysServer) StartLogin(context.Context, *Empty) (*PasskeysStartLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartLogin not implemented")
}
func (UnimplementedPasskeysServer) FinishLogin(context.Context, *PasskeysFinishLoginReq) (*PasskeysFinishLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishLogin not implemented")
}
func (UnimplementedPasskeysServer) FindTenPasskeys(context.Context, *FindTenPasskeysReq) (*FindTenPasskeysResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTenPasskeys not implemented")
}
func (UnimplementedPasskeysServer) RemovePasskey(context.Context, *RemovePasskeyReq) (*RemovePasskeyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePasskey not implemented")
}
func (UnimplementedPasskeysServer) mustEmbedUnimplementedPasskeysServer() {}
func (UnimplementedPasskeysServer) testEmbeddedByValue()                  {}

// UnsafePasskeysServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PasskeysServer will
// result in compilation errors.
type UnsafePasskeysServer interface {
	mustEmbedUnimplementedPasskeysServer()
}

func RegisterPasskeysServer(s grpc.ServiceRegistrar, srv PasskeysServer) {
	// If the following call pancis, it indicates UnimplementedPasskeysServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Passkeys_ServiceDesc, srv)
}

func _Passkeys_StartRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasskeysStartRegistrationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasskeysServer).StartRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Passkeys_StartRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasskeysServer).StartRegistration(ctx, req.(*PasskeysStartRegistrationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Passkeys_FinishRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasskeysFinishRegistrationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasskeysServer).FinishRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Passkeys_FinishRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasskeysServer).FinishRegistration(ctx, req.(*PasskeysFinishRegistrationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Passkeys_StartLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasskeysServer).StartLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Passkeys_StartLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasskeysServer).StartLogin(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Passkeys_FinishLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasskeysFinishLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasskeysServer).FinishLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Passkeys_FinishLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasskeysServer).FinishLogin(ctx, req.(*PasskeysFinishLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Passkeys_FindTenPasskeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindTenPasskeysReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasskeysServer).FindTenPasskeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Passkeys_FindTenPasskeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasskeysServer).FindTenPasskeys(ctx, req.(*FindTenPasskeysReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Passkeys_RemovePasskey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePasskeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasskeysServer).RemovePasskey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Passkeys_RemovePasskey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasskeysServer).RemovePasskey(ctx, req.(*RemovePasskeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Passkeys_ServiceDesc is the grpc.ServiceDesc for Passkeys service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Passkeys_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apollo.Passkeys",
	HandlerType: (*PasskeysServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartRegistration",
			Handler:    _Passkeys_StartRegistration_Handler,
		},
		{
			MethodName: "FinishRegistration",
			Handler:    _Passkeys_FinishRegistration_Handler,
		},
		{
			MethodName: "StartLogin",
			Handler:    _Passkeys_StartLogin_Handler,
		},
		{
			MethodName: "FinishLogin",
			Handler:    _Passkeys_FinishLogin_Handler,
		},
		{
			MethodName: "FindTenPasskeys",
			Handler:    _Passkeys_FindTenPasskeys_Handler,
		},
		{
			MethodName: "RemovePasskey",
			Handler:    _Passkeys_RemovePasskey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apollo-rpc.proto",
}

const (
	ThirdParty_GetInfo_FullMethodName        = "/apollo.ThirdParty/GetInfo"
	ThirdParty_Bind_FullMethodName           = "/apollo.ThirdParty/Bind"
	ThirdParty_Continue_FullMethodName       = "/apollo.ThirdParty/Continue"
	ThirdParty_HandleCallback_FullMethodName = "/apollo.ThirdParty/HandleCallback"
	ThirdParty_Remove_FullMethodName         = "/apollo.ThirdParty/Remove"
)

// ThirdPartyClient is the client API for ThirdParty service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ================= 服务定义 =================
type ThirdPartyClient interface {
	// GetInfo 获取第三方账号绑定信息
	GetInfo(ctx context.Context, in *ThirdPartyGetInfoReq, opts ...grpc.CallOption) (*ThirdPartyGetInfoResp, error)
	// Bind 绑定第三方账号
	Bind(ctx context.Context, in *ThirdPartyBindReq, opts ...grpc.CallOption) (*Empty, error)
	// 继续 - 登录或注册
	// Continue 使用第三方账号继续 - 登录或注册 返回用户id
	Continue(ctx context.Context, in *ThirdPartyContinueReq, opts ...grpc.CallOption) (*ThirdPartyContinueResp, error)
	// HandleCallback 处理第三方回调数据
	HandleCallback(ctx context.Context, in *ThirdPartyContinueReq, opts ...grpc.CallOption) (*ThirdPartyContinueResp, error)
	// Remove 移除第三方账号
	Remove(ctx context.Context, in *ThirdPartyRemoveReq, opts ...grpc.CallOption) (*Empty, error)
}

type thirdPartyClient struct {
	cc grpc.ClientConnInterface
}

func NewThirdPartyClient(cc grpc.ClientConnInterface) ThirdPartyClient {
	return &thirdPartyClient{cc}
}

func (c *thirdPartyClient) GetInfo(ctx context.Context, in *ThirdPartyGetInfoReq, opts ...grpc.CallOption) (*ThirdPartyGetInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ThirdPartyGetInfoResp)
	err := c.cc.Invoke(ctx, ThirdParty_GetInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thirdPartyClient) Bind(ctx context.Context, in *ThirdPartyBindReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ThirdParty_Bind_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thirdPartyClient) Continue(ctx context.Context, in *ThirdPartyContinueReq, opts ...grpc.CallOption) (*ThirdPartyContinueResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ThirdPartyContinueResp)
	err := c.cc.Invoke(ctx, ThirdParty_Continue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thirdPartyClient) HandleCallback(ctx context.Context, in *ThirdPartyContinueReq, opts ...grpc.CallOption) (*ThirdPartyContinueResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ThirdPartyContinueResp)
	err := c.cc.Invoke(ctx, ThirdParty_HandleCallback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thirdPartyClient) Remove(ctx context.Context, in *ThirdPartyRemoveReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ThirdParty_Remove_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThirdPartyServer is the server API for ThirdParty service.
// All implementations must embed UnimplementedThirdPartyServer
// for forward compatibility.
//
// ================= 服务定义 =================
type ThirdPartyServer interface {
	// GetInfo 获取第三方账号绑定信息
	GetInfo(context.Context, *ThirdPartyGetInfoReq) (*ThirdPartyGetInfoResp, error)
	// Bind 绑定第三方账号
	Bind(context.Context, *ThirdPartyBindReq) (*Empty, error)
	// 继续 - 登录或注册
	// Continue 使用第三方账号继续 - 登录或注册 返回用户id
	Continue(context.Context, *ThirdPartyContinueReq) (*ThirdPartyContinueResp, error)
	// HandleCallback 处理第三方回调数据
	HandleCallback(context.Context, *ThirdPartyContinueReq) (*ThirdPartyContinueResp, error)
	// Remove 移除第三方账号
	Remove(context.Context, *ThirdPartyRemoveReq) (*Empty, error)
	mustEmbedUnimplementedThirdPartyServer()
}

// UnimplementedThirdPartyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedThirdPartyServer struct{}

func (UnimplementedThirdPartyServer) GetInfo(context.Context, *ThirdPartyGetInfoReq) (*ThirdPartyGetInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedThirdPartyServer) Bind(context.Context, *ThirdPartyBindReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bind not implemented")
}
func (UnimplementedThirdPartyServer) Continue(context.Context, *ThirdPartyContinueReq) (*ThirdPartyContinueResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Continue not implemented")
}
func (UnimplementedThirdPartyServer) HandleCallback(context.Context, *ThirdPartyContinueReq) (*ThirdPartyContinueResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleCallback not implemented")
}
func (UnimplementedThirdPartyServer) Remove(context.Context, *ThirdPartyRemoveReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedThirdPartyServer) mustEmbedUnimplementedThirdPartyServer() {}
func (UnimplementedThirdPartyServer) testEmbeddedByValue()                    {}

// UnsafeThirdPartyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThirdPartyServer will
// result in compilation errors.
type UnsafeThirdPartyServer interface {
	mustEmbedUnimplementedThirdPartyServer()
}

func RegisterThirdPartyServer(s grpc.ServiceRegistrar, srv ThirdPartyServer) {
	// If the following call pancis, it indicates UnimplementedThirdPartyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ThirdParty_ServiceDesc, srv)
}

func _ThirdParty_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThirdPartyGetInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThirdPartyServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThirdParty_GetInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThirdPartyServer).GetInfo(ctx, req.(*ThirdPartyGetInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThirdParty_Bind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThirdPartyBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThirdPartyServer).Bind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThirdParty_Bind_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThirdPartyServer).Bind(ctx, req.(*ThirdPartyBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThirdParty_Continue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThirdPartyContinueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThirdPartyServer).Continue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThirdParty_Continue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThirdPartyServer).Continue(ctx, req.(*ThirdPartyContinueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThirdParty_HandleCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThirdPartyContinueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThirdPartyServer).HandleCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThirdParty_HandleCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThirdPartyServer).HandleCallback(ctx, req.(*ThirdPartyContinueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThirdParty_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThirdPartyRemoveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThirdPartyServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThirdParty_Remove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThirdPartyServer).Remove(ctx, req.(*ThirdPartyRemoveReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ThirdParty_ServiceDesc is the grpc.ServiceDesc for ThirdParty service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ThirdParty_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apollo.ThirdParty",
	HandlerType: (*ThirdPartyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _ThirdParty_GetInfo_Handler,
		},
		{
			MethodName: "Bind",
			Handler:    _ThirdParty_Bind_Handler,
		},
		{
			MethodName: "Continue",
			Handler:    _ThirdParty_Continue_Handler,
		},
		{
			MethodName: "HandleCallback",
			Handler:    _ThirdParty_HandleCallback_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _ThirdParty_Remove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apollo-rpc.proto",
}

const (
	Security_GenerateSubsystemToken_FullMethodName = "/apollo.Security/GenerateSubsystemToken"
	Security_ValidateSubsystemToken_FullMethodName = "/apollo.Security/ValidateSubsystemToken"
	Security_RemoveSubsystemToken_FullMethodName   = "/apollo.Security/RemoveSubsystemToken"
	Security_FindTenSubsystemTokens_FullMethodName = "/apollo.Security/FindTenSubsystemTokens"
)

// SecurityClient is the client API for Security service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecurityClient interface {
	// GenerateSubsystemToken 生成子系统令牌
	// GenerateSubsystemToken 生成可调用子系统的令牌
	GenerateSubsystemToken(ctx context.Context, in *GenerateSubsystemTokenReq, opts ...grpc.CallOption) (*GenerateSubsystemTokenResp, error)
	// ValidateSubsystemToken 验证子系统令牌
	// ValidateToken 验证可调用子系统的令牌
	ValidateSubsystemToken(ctx context.Context, in *ValidateSubsystemTokenReq, opts ...grpc.CallOption) (*ValidateSubsystemTokenResp, error)
	// RemoveSubsystemToken 移除子系统令牌
	// RemoveSubsystemToken 验证可调用子系统的令牌
	RemoveSubsystemToken(ctx context.Context, in *RemoveSubsystemTokenReq, opts ...grpc.CallOption) (*RemoveSubsystemTokenResp, error)
	// FindTenSubsystemTokens 查询 10 个子系统令牌
	FindTenSubsystemTokens(ctx context.Context, in *FindTenSubsystemTokensReq, opts ...grpc.CallOption) (*FindTenSubsystemTokensResp, error)
}

type securityClient struct {
	cc grpc.ClientConnInterface
}

func NewSecurityClient(cc grpc.ClientConnInterface) SecurityClient {
	return &securityClient{cc}
}

func (c *securityClient) GenerateSubsystemToken(ctx context.Context, in *GenerateSubsystemTokenReq, opts ...grpc.CallOption) (*GenerateSubsystemTokenResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateSubsystemTokenResp)
	err := c.cc.Invoke(ctx, Security_GenerateSubsystemToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityClient) ValidateSubsystemToken(ctx context.Context, in *ValidateSubsystemTokenReq, opts ...grpc.CallOption) (*ValidateSubsystemTokenResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateSubsystemTokenResp)
	err := c.cc.Invoke(ctx, Security_ValidateSubsystemToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityClient) RemoveSubsystemToken(ctx context.Context, in *RemoveSubsystemTokenReq, opts ...grpc.CallOption) (*RemoveSubsystemTokenResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveSubsystemTokenResp)
	err := c.cc.Invoke(ctx, Security_RemoveSubsystemToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityClient) FindTenSubsystemTokens(ctx context.Context, in *FindTenSubsystemTokensReq, opts ...grpc.CallOption) (*FindTenSubsystemTokensResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindTenSubsystemTokensResp)
	err := c.cc.Invoke(ctx, Security_FindTenSubsystemTokens_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecurityServer is the server API for Security service.
// All implementations must embed UnimplementedSecurityServer
// for forward compatibility.
type SecurityServer interface {
	// GenerateSubsystemToken 生成子系统令牌
	// GenerateSubsystemToken 生成可调用子系统的令牌
	GenerateSubsystemToken(context.Context, *GenerateSubsystemTokenReq) (*GenerateSubsystemTokenResp, error)
	// ValidateSubsystemToken 验证子系统令牌
	// ValidateToken 验证可调用子系统的令牌
	ValidateSubsystemToken(context.Context, *ValidateSubsystemTokenReq) (*ValidateSubsystemTokenResp, error)
	// RemoveSubsystemToken 移除子系统令牌
	// RemoveSubsystemToken 验证可调用子系统的令牌
	RemoveSubsystemToken(context.Context, *RemoveSubsystemTokenReq) (*RemoveSubsystemTokenResp, error)
	// FindTenSubsystemTokens 查询 10 个子系统令牌
	FindTenSubsystemTokens(context.Context, *FindTenSubsystemTokensReq) (*FindTenSubsystemTokensResp, error)
	mustEmbedUnimplementedSecurityServer()
}

// UnimplementedSecurityServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSecurityServer struct{}

func (UnimplementedSecurityServer) GenerateSubsystemToken(context.Context, *GenerateSubsystemTokenReq) (*GenerateSubsystemTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateSubsystemToken not implemented")
}
func (UnimplementedSecurityServer) ValidateSubsystemToken(context.Context, *ValidateSubsystemTokenReq) (*ValidateSubsystemTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateSubsystemToken not implemented")
}
func (UnimplementedSecurityServer) RemoveSubsystemToken(context.Context, *RemoveSubsystemTokenReq) (*RemoveSubsystemTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSubsystemToken not implemented")
}
func (UnimplementedSecurityServer) FindTenSubsystemTokens(context.Context, *FindTenSubsystemTokensReq) (*FindTenSubsystemTokensResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTenSubsystemTokens not implemented")
}
func (UnimplementedSecurityServer) mustEmbedUnimplementedSecurityServer() {}
func (UnimplementedSecurityServer) testEmbeddedByValue()                  {}

// UnsafeSecurityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecurityServer will
// result in compilation errors.
type UnsafeSecurityServer interface {
	mustEmbedUnimplementedSecurityServer()
}

func RegisterSecurityServer(s grpc.ServiceRegistrar, srv SecurityServer) {
	// If the following call pancis, it indicates UnimplementedSecurityServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Security_ServiceDesc, srv)
}

func _Security_GenerateSubsystemToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateSubsystemTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServer).GenerateSubsystemToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Security_GenerateSubsystemToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServer).GenerateSubsystemToken(ctx, req.(*GenerateSubsystemTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Security_ValidateSubsystemToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateSubsystemTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServer).ValidateSubsystemToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Security_ValidateSubsystemToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServer).ValidateSubsystemToken(ctx, req.(*ValidateSubsystemTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Security_RemoveSubsystemToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSubsystemTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServer).RemoveSubsystemToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Security_RemoveSubsystemToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServer).RemoveSubsystemToken(ctx, req.(*RemoveSubsystemTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Security_FindTenSubsystemTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindTenSubsystemTokensReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServer).FindTenSubsystemTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Security_FindTenSubsystemTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServer).FindTenSubsystemTokens(ctx, req.(*FindTenSubsystemTokensReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Security_ServiceDesc is the grpc.ServiceDesc for Security service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Security_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apollo.Security",
	HandlerType: (*SecurityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateSubsystemToken",
			Handler:    _Security_GenerateSubsystemToken_Handler,
		},
		{
			MethodName: "ValidateSubsystemToken",
			Handler:    _Security_ValidateSubsystemToken_Handler,
		},
		{
			MethodName: "RemoveSubsystemToken",
			Handler:    _Security_RemoveSubsystemToken_Handler,
		},
		{
			MethodName: "FindTenSubsystemTokens",
			Handler:    _Security_FindTenSubsystemTokens_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apollo-rpc.proto",
}
