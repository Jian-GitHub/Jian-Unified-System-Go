// Code generated by goctl. DO NOT EDIT.
// goctl 1.9.0
// Source: apollo-rpc.proto

package account

import (
	"context"

	"jian-unified-system/apollo/apollo-rpc/apollo"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Empty                         = apollo.Empty
	GenerateTokenReq              = apollo.GenerateTokenReq
	GenerateTokenResp             = apollo.GenerateTokenResp
	LoginReq                      = apollo.LoginReq
	LoginResp                     = apollo.LoginResp
	NotificationInfoReq           = apollo.NotificationInfoReq
	NotificationInfoResp          = apollo.NotificationInfoResp
	PasskeysFinishLoginReq        = apollo.PasskeysFinishLoginReq
	PasskeysFinishLoginResp       = apollo.PasskeysFinishLoginResp
	PasskeysFinishRegistrationReq = apollo.PasskeysFinishRegistrationReq
	PasskeysStartLoginResp        = apollo.PasskeysStartLoginResp
	PasskeysStartRegistrationReq  = apollo.PasskeysStartRegistrationReq
	PasskeysStartRegistrationResp = apollo.PasskeysStartRegistrationResp
	RegistrationReq               = apollo.RegistrationReq
	ThirdPartyBindReq             = apollo.ThirdPartyBindReq
	ThirdPartyContinueReq         = apollo.ThirdPartyContinueReq
	ThirdPartyContinueResp        = apollo.ThirdPartyContinueResp
	ValidateTokenReq              = apollo.ValidateTokenReq
	ValidateTokenResp             = apollo.ValidateTokenResp

	Account interface {
		// 注册
		Registration(ctx context.Context, in *RegistrationReq, opts ...grpc.CallOption) (*Empty, error)
		// 登录
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		// 用户信息
		NotificationInfo(ctx context.Context, in *NotificationInfoReq, opts ...grpc.CallOption) (*NotificationInfoResp, error)
		// 生成子系统令牌
		GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error)
		// 验证子系统令牌
		ValidateToken(ctx context.Context, in *ValidateTokenReq, opts ...grpc.CallOption) (*ValidateTokenResp, error)
	}

	defaultAccount struct {
		cli zrpc.Client
	}
)

func NewAccount(cli zrpc.Client) Account {
	return &defaultAccount{
		cli: cli,
	}
}

// 注册
func (m *defaultAccount) Registration(ctx context.Context, in *RegistrationReq, opts ...grpc.CallOption) (*Empty, error) {
	client := apollo.NewAccountClient(m.cli.Conn())
	return client.Registration(ctx, in, opts...)
}

// 登录
func (m *defaultAccount) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := apollo.NewAccountClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

// 用户信息
func (m *defaultAccount) NotificationInfo(ctx context.Context, in *NotificationInfoReq, opts ...grpc.CallOption) (*NotificationInfoResp, error) {
	client := apollo.NewAccountClient(m.cli.Conn())
	return client.NotificationInfo(ctx, in, opts...)
}

// 生成子系统令牌
func (m *defaultAccount) GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error) {
	client := apollo.NewAccountClient(m.cli.Conn())
	return client.GenerateToken(ctx, in, opts...)
}

// 验证子系统令牌
func (m *defaultAccount) ValidateToken(ctx context.Context, in *ValidateTokenReq, opts ...grpc.CallOption) (*ValidateTokenResp, error) {
	client := apollo.NewAccountClient(m.cli.Conn())
	return client.ValidateToken(ctx, in, opts...)
}
