// Code generated by goctl. DO NOT EDIT.
// goctl 1.9.0
// Source: apollo-rpc.proto

package account

import (
	"context"

	"jian-unified-system/apollo/apollo-rpc/apollo"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Empty                          = apollo.Empty
	FindTenPasskeysReq             = apollo.FindTenPasskeysReq
	FindTenPasskeysResp            = apollo.FindTenPasskeysResp
	FindTenSubsystemTokensReq      = apollo.FindTenSubsystemTokensReq
	FindTenSubsystemTokensResp     = apollo.FindTenSubsystemTokensResp
	GenerateSubsystemTokenReq      = apollo.GenerateSubsystemTokenReq
	GenerateSubsystemTokenResp     = apollo.GenerateSubsystemTokenResp
	LoginReq                       = apollo.LoginReq
	LoginResp                      = apollo.LoginResp
	Passkey                        = apollo.Passkey
	PasskeysFinishLoginReq         = apollo.PasskeysFinishLoginReq
	PasskeysFinishLoginResp        = apollo.PasskeysFinishLoginResp
	PasskeysFinishRegistrationReq  = apollo.PasskeysFinishRegistrationReq
	PasskeysFinishRegistrationResp = apollo.PasskeysFinishRegistrationResp
	PasskeysStartLoginResp         = apollo.PasskeysStartLoginResp
	PasskeysStartRegistrationReq   = apollo.PasskeysStartRegistrationReq
	PasskeysStartRegistrationResp  = apollo.PasskeysStartRegistrationResp
	PasswordUpdatedDate            = apollo.PasswordUpdatedDate
	RegistrationReq                = apollo.RegistrationReq
	RemovePasskeyReq               = apollo.RemovePasskeyReq
	RemovePasskeyResp              = apollo.RemovePasskeyResp
	RemoveSubsystemTokenReq        = apollo.RemoveSubsystemTokenReq
	RemoveSubsystemTokenResp       = apollo.RemoveSubsystemTokenResp
	SubsystemToken                 = apollo.SubsystemToken
	ThirdPartyAccountInfo          = apollo.ThirdPartyAccountInfo
	ThirdPartyAccounts             = apollo.ThirdPartyAccounts
	ThirdPartyBindReq              = apollo.ThirdPartyBindReq
	ThirdPartyContinueReq          = apollo.ThirdPartyContinueReq
	ThirdPartyContinueResp         = apollo.ThirdPartyContinueResp
	ThirdPartyGetInfoReq           = apollo.ThirdPartyGetInfoReq
	ThirdPartyGetInfoResp          = apollo.ThirdPartyGetInfoResp
	ThirdPartyRemoveReq            = apollo.ThirdPartyRemoveReq
	UserContact                    = apollo.UserContact
	UserInfoReq                    = apollo.UserInfoReq
	UserInfoResp                   = apollo.UserInfoResp
	UserSecurityInfoReq            = apollo.UserSecurityInfoReq
	UserSecurityInfoResp           = apollo.UserSecurityInfoResp
	ValidateSubsystemTokenReq      = apollo.ValidateSubsystemTokenReq
	ValidateSubsystemTokenResp     = apollo.ValidateSubsystemTokenResp

	Account interface {
		// 注册
		Registration(ctx context.Context, in *RegistrationReq, opts ...grpc.CallOption) (*Empty, error)
		// 登录
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		// 用户信息
		UserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error)
		// 用户安全信息
		UserSecurityInfo(ctx context.Context, in *UserSecurityInfoReq, opts ...grpc.CallOption) (*UserSecurityInfoResp, error)
	}

	defaultAccount struct {
		cli zrpc.Client
	}
)

func NewAccount(cli zrpc.Client) Account {
	return &defaultAccount{
		cli: cli,
	}
}

// 注册
func (m *defaultAccount) Registration(ctx context.Context, in *RegistrationReq, opts ...grpc.CallOption) (*Empty, error) {
	client := apollo.NewAccountClient(m.cli.Conn())
	return client.Registration(ctx, in, opts...)
}

// 登录
func (m *defaultAccount) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := apollo.NewAccountClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

// 用户信息
func (m *defaultAccount) UserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error) {
	client := apollo.NewAccountClient(m.cli.Conn())
	return client.UserInfo(ctx, in, opts...)
}

// 用户安全信息
func (m *defaultAccount) UserSecurityInfo(ctx context.Context, in *UserSecurityInfoReq, opts ...grpc.CallOption) (*UserSecurityInfoResp, error) {
	client := apollo.NewAccountClient(m.cli.Conn())
	return client.UserSecurityInfo(ctx, in, opts...)
}
