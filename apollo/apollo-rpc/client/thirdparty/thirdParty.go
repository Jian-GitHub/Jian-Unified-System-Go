// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: apollo-rpc.proto

package thirdparty

import (
	"context"

	"jian-unified-system/apollo/apollo-rpc/apollo"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Empty                         = apollo.Empty
	LoginReq                      = apollo.LoginReq
	LoginResp                     = apollo.LoginResp
	PasskeysFinishLoginReq        = apollo.PasskeysFinishLoginReq
	PasskeysFinishLoginResp       = apollo.PasskeysFinishLoginResp
	PasskeysFinishRegistrationReq = apollo.PasskeysFinishRegistrationReq
	PasskeysStartLoginResp        = apollo.PasskeysStartLoginResp
	PasskeysStartRegistrationReq  = apollo.PasskeysStartRegistrationReq
	PasskeysStartRegistrationResp = apollo.PasskeysStartRegistrationResp
	RegistrationReq               = apollo.RegistrationReq
	ThirdPartyBindReq             = apollo.ThirdPartyBindReq
	ThirdPartyContinueReq         = apollo.ThirdPartyContinueReq
	ThirdPartyContinueResp        = apollo.ThirdPartyContinueResp

	ThirdParty interface {
		// 绑定
		Bind(ctx context.Context, in *ThirdPartyBindReq, opts ...grpc.CallOption) (*Empty, error)
		// 继续 - 登录或注册
		Continue(ctx context.Context, in *ThirdPartyBindReq, opts ...grpc.CallOption) (*ThirdPartyContinueResp, error)
	}

	defaultThirdParty struct {
		cli zrpc.Client
	}
)

func NewThirdParty(cli zrpc.Client) ThirdParty {
	return &defaultThirdParty{
		cli: cli,
	}
}

// 绑定
func (m *defaultThirdParty) Bind(ctx context.Context, in *ThirdPartyBindReq, opts ...grpc.CallOption) (*Empty, error) {
	client := apollo.NewThirdPartyClient(m.cli.Conn())
	return client.Bind(ctx, in, opts...)
}

// 继续 - 登录或注册
func (m *defaultThirdParty) Continue(ctx context.Context, in *ThirdPartyBindReq, opts ...grpc.CallOption) (*ThirdPartyContinueResp, error) {
	client := apollo.NewThirdPartyClient(m.cli.Conn())
	return client.Continue(ctx, in, opts...)
}
