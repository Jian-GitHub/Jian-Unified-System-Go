// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	contactFieldNames          = builder.RawFieldNames(&Contact{})
	contactRows                = strings.Join(contactFieldNames, ",")
	contactRowsExpectAutoSet   = strings.Join(stringx.Remove(contactFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	contactRowsWithPlaceHolder = strings.Join(stringx.Remove(contactFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheApolloContactIdPrefix = "cache:apollo:contact:id:"
)

type (
	contactModel interface {
		Insert(ctx context.Context, data *Contact) (sql.Result, error)
		InsertBatch(ctx context.Context, data []*Contact) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Contact, error)
		Update(ctx context.Context, data *Contact) error
		Delete(ctx context.Context, id int64) error
	}

	defaultContactModel struct {
		sqlc.CachedConn
		table string
	}

	Contact struct {
		Id          int64     `db:"id"`
		UserId      int64     `db:"user_id"`      // User ID
		Value       string    `db:"value"`        // Email / Phone Number
		Type        int64     `db:"type"`         // Contact Type0: Phone Number1: Email
		PhoneRegion string    `db:"phone_region"` // Format: (+1) / +1Not '' When Type = 0
		CreateTime  time.Time `db:"create_time"`
		IsEnabled   int64     `db:"is_enabled"` // 0: Disenabled1: Enabled
	}
)

func newContactModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultContactModel {
	return &defaultContactModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`contact`",
	}
}

func (m *defaultContactModel) Delete(ctx context.Context, id int64) error {
	apolloContactIdKey := fmt.Sprintf("%s%v", cacheApolloContactIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, apolloContactIdKey)
	return err
}

func (m *defaultContactModel) FindOne(ctx context.Context, id int64) (*Contact, error) {
	apolloContactIdKey := fmt.Sprintf("%s%v", cacheApolloContactIdPrefix, id)
	var resp Contact
	err := m.QueryRowCtx(ctx, &resp, apolloContactIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", contactRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultContactModel) Insert(ctx context.Context, data *Contact) (sql.Result, error) {
	apolloContactIdKey := fmt.Sprintf("%s%v", cacheApolloContactIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, contactRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.Value, data.Type, data.PhoneRegion, data.IsEnabled)
	}, apolloContactIdKey)
	return ret, err
}

func (m *defaultContactModel) InsertBatch(ctx context.Context, data []*Contact) (sql.Result, error) {
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		// 构建基础SQL语句
		query := fmt.Sprintf("INSERT INTO %s (%s) VALUES ", m.table, contactRowsExpectAutoSet)

		// 准备占位符和参数
		var placeholders []string
		var args []interface{}

		for _, item := range data {
			placeholders = append(placeholders, "(?, ?, ?, ?, ?)")
			args = append(args, item.UserId, item.Value, item.Type, item.PhoneRegion, item.IsEnabled)
		}

		// 拼接完整的SQL语句
		query += strings.Join(placeholders, ",")

		// 执行批量插入
		return conn.ExecCtx(ctx, query, args...)
	})
}

func (m *defaultContactModel) Update(ctx context.Context, data *Contact) error {
	apolloContactIdKey := fmt.Sprintf("%s%v", cacheApolloContactIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, contactRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.Value, data.Type, data.PhoneRegion, data.IsEnabled, data.Id)
	}, apolloContactIdKey)
	return err
}

func (m *defaultContactModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheApolloContactIdPrefix, primary)
}

func (m *defaultContactModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", contactRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultContactModel) tableName() string {
	return m.table
}
