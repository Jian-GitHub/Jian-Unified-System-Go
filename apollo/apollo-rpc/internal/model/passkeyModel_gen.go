// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	passkeyFieldNames          = builder.RawFieldNames(&Passkey{})
	passkeyRows                = strings.Join(passkeyFieldNames, ",")
	passkeyRowsExpectAutoSet   = strings.Join(stringx.Remove(passkeyFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	passkeyRowsWithPlaceHolder = strings.Join(stringx.Remove(passkeyFieldNames, "`credential_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheApolloPasskeyCredentialIdPrefix = "cache:apollo:passkey:credentialId:"
)

type (
	passkeyModel interface {
		Insert(ctx context.Context, data *Passkey) (sql.Result, error)
		FindOne(ctx context.Context, credentialId string) (*Passkey, error)
		Update(ctx context.Context, data *Passkey) error
		Delete(ctx context.Context, credentialId string) error
	}

	defaultPasskeyModel struct {
		sqlc.CachedConn
		table string
	}

	Passkey struct {
		CredentialId string         `db:"credential_id"`
		UserId       int64          `db:"user_id"`
		DisplayName  string         `db:"display_name"`
		PublicKey    string         `db:"public_key"`
		SignCount    int64          `db:"sign_count"`
		Transports   sql.NullString `db:"transports"`
		CreatedAt    time.Time      `db:"created_at"`
		LastUsedAt   time.Time      `db:"last_used_at"`
	}
)

func newPasskeyModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultPasskeyModel {
	return &defaultPasskeyModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`passkey`",
	}
}

func (m *defaultPasskeyModel) Delete(ctx context.Context, credentialId string) error {
	apolloPasskeyCredentialIdKey := fmt.Sprintf("%s%v", cacheApolloPasskeyCredentialIdPrefix, credentialId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `credential_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, credentialId)
	}, apolloPasskeyCredentialIdKey)
	return err
}

func (m *defaultPasskeyModel) FindOne(ctx context.Context, credentialId string) (*Passkey, error) {
	apolloPasskeyCredentialIdKey := fmt.Sprintf("%s%v", cacheApolloPasskeyCredentialIdPrefix, credentialId)
	var resp Passkey
	err := m.QueryRowCtx(ctx, &resp, apolloPasskeyCredentialIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `credential_id` = ? limit 1", passkeyRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, credentialId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPasskeyModel) Insert(ctx context.Context, data *Passkey) (sql.Result, error) {
	apolloPasskeyCredentialIdKey := fmt.Sprintf("%s%v", cacheApolloPasskeyCredentialIdPrefix, data.CredentialId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, passkeyRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.CredentialId, data.UserId, data.DisplayName, data.PublicKey, data.SignCount, data.Transports, data.LastUsedAt)
	}, apolloPasskeyCredentialIdKey)
	return ret, err
}

func (m *defaultPasskeyModel) Update(ctx context.Context, data *Passkey) error {
	apolloPasskeyCredentialIdKey := fmt.Sprintf("%s%v", cacheApolloPasskeyCredentialIdPrefix, data.CredentialId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `credential_id` = ?", m.table, passkeyRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.DisplayName, data.PublicKey, data.SignCount, data.Transports, data.LastUsedAt, data.CredentialId)
	}, apolloPasskeyCredentialIdKey)
	return err
}

func (m *defaultPasskeyModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheApolloPasskeyCredentialIdPrefix, primary)
}

func (m *defaultPasskeyModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `credential_id` = ? limit 1", passkeyRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultPasskeyModel) tableName() string {
	return m.table
}
