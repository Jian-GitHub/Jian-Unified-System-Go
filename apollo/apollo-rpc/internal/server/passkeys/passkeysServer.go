// Code generated by goctl. DO NOT EDIT.
// goctl 1.9.0
// Source: apollo-rpc.proto

package server

import (
	"context"

	"jian-unified-system/apollo/apollo-rpc/apollo"
	"jian-unified-system/apollo/apollo-rpc/internal/logic/passkeys"
	"jian-unified-system/apollo/apollo-rpc/internal/svc"
)

type PasskeysServer struct {
	svcCtx *svc.ServiceContext
	apollo.UnimplementedPasskeysServer
}

func NewPasskeysServer(svcCtx *svc.ServiceContext) *PasskeysServer {
	return &PasskeysServer{
		svcCtx: svcCtx,
	}
}

// 注册
func (s *PasskeysServer) StartRegistration(ctx context.Context, in *apollo.PasskeysStartRegistrationReq) (*apollo.PasskeysStartRegistrationResp, error) {
	l := passkeyslogic.NewStartRegistrationLogic(ctx, s.svcCtx)
	return l.StartRegistration(in)
}

// FinishRegistration 注册第二步 - 完成
func (s *PasskeysServer) FinishRegistration(ctx context.Context, in *apollo.PasskeysFinishRegistrationReq) (*apollo.PasskeysFinishRegistrationResp, error) {
	l := passkeyslogic.NewFinishRegistrationLogic(ctx, s.svcCtx)
	return l.FinishRegistration(in)
}

// 登录
func (s *PasskeysServer) StartLogin(ctx context.Context, in *apollo.Empty) (*apollo.PasskeysStartLoginResp, error) {
	l := passkeyslogic.NewStartLoginLogic(ctx, s.svcCtx)
	return l.StartLogin(in)
}

// FinishLogin 登陆第二步 - 完成 返回用户id
func (s *PasskeysServer) FinishLogin(ctx context.Context, in *apollo.PasskeysFinishLoginReq) (*apollo.PasskeysFinishLoginResp, error) {
	l := passkeyslogic.NewFinishLoginLogic(ctx, s.svcCtx)
	return l.FinishLogin(in)
}

// FindTenPasskeys 查询 10 个Passkeys
func (s *PasskeysServer) FindTenPasskeys(ctx context.Context, in *apollo.FindTenPasskeysReq) (*apollo.FindTenPasskeysResp, error) {
	l := passkeyslogic.NewFindTenPasskeysLogic(ctx, s.svcCtx)
	return l.FindTenPasskeys(in)
}

// RemovePasskey 移除 Passkey
func (s *PasskeysServer) RemovePasskey(ctx context.Context, in *apollo.RemovePasskeyReq) (*apollo.RemovePasskeyResp, error) {
	l := passkeyslogic.NewRemovePasskeyLogic(ctx, s.svcCtx)
	return l.RemovePasskey(in)
}
