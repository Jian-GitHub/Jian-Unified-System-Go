// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: apollo.proto

package server

import (
	"context"

	"jian-unified-system/apollo/apollo-rpc/apollo"
	"jian-unified-system/apollo/apollo-rpc/internal/logic"
	"jian-unified-system/apollo/apollo-rpc/internal/svc"
)

type PasskeysServer struct {
	svcCtx *svc.ServiceContext
	apollo.UnimplementedPasskeysServer
}

func NewPasskeysServer(svcCtx *svc.ServiceContext) *PasskeysServer {
	return &PasskeysServer{
		svcCtx: svcCtx,
	}
}

// 注册
func (s *PasskeysServer) StartRegistration(ctx context.Context, in *apollo.StartRegistrationReq) (*apollo.StartRegistrationResp, error) {
	l := logic.NewStartRegistrationLogic(ctx, s.svcCtx)
	return l.StartRegistration(in)
}

// FinishRegistration 注册第二步 - 完成
func (s *PasskeysServer) FinishRegistration(ctx context.Context, in *apollo.FinishRegistrationReq) (*apollo.FinishRegistrationResp, error) {
	l := logic.NewFinishRegistrationLogic(ctx, s.svcCtx)
	return l.FinishRegistration(in)
}

// 登录
func (s *PasskeysServer) StartLogin(ctx context.Context, in *apollo.StartLoginReq) (*apollo.StartLoginResp, error) {
	l := logic.NewStartLoginLogic(ctx, s.svcCtx)
	return l.StartLogin(in)
}

// FinishLogin 登陆第二步 - 完成
func (s *PasskeysServer) FinishLogin(ctx context.Context, in *apollo.FinishLoginReq) (*apollo.FinishLoginResp, error) {
	l := logic.NewFinishLoginLogic(ctx, s.svcCtx)
	return l.FinishLogin(in)
}
