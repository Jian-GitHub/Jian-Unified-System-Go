// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: apollo-rpc.proto

package server

import (
	"context"

	"jian-unified-system/apollo/apollo-rpc/apollo"
	"jian-unified-system/apollo/apollo-rpc/internal/logic/thirdparty"
	"jian-unified-system/apollo/apollo-rpc/internal/svc"
)

type ThirdPartyServer struct {
	svcCtx *svc.ServiceContext
	apollo.UnimplementedThirdPartyServer
}

func NewThirdPartyServer(svcCtx *svc.ServiceContext) *ThirdPartyServer {
	return &ThirdPartyServer{
		svcCtx: svcCtx,
	}
}

// 绑定
func (s *ThirdPartyServer) Bind(ctx context.Context, in *apollo.ThirdPartyBindReq) (*apollo.Empty, error) {
	l := thirdpartylogic.NewBindLogic(ctx, s.svcCtx)
	return l.Bind(in)
}

// 继续 - 登录或注册
func (s *ThirdPartyServer) Continue(ctx context.Context, in *apollo.ThirdPartyContinueReq) (*apollo.ThirdPartyContinueResp, error) {
	l := thirdpartylogic.NewContinueLogic(ctx, s.svcCtx)
	return l.Continue(in)
}

// HandleCallback 处理第三方回调数据
func (s *ThirdPartyServer) HandleCallback(ctx context.Context, in *apollo.ThirdPartyContinueReq) (*apollo.ThirdPartyContinueResp, error) {
	l := thirdpartylogic.NewHandleCallbackLogic(ctx, s.svcCtx)
	return l.HandleCallback(in)
}
