// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: apollo.proto

package passkeys

import (
	"context"

	"jian-unified-system/apollo/apollo-rpc/apollo"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	FinishLoginReq         = apollo.FinishLoginReq
	FinishLoginResp        = apollo.FinishLoginResp
	FinishRegistrationReq  = apollo.FinishRegistrationReq
	FinishRegistrationResp = apollo.FinishRegistrationResp
	StartLoginReq          = apollo.StartLoginReq
	StartLoginResp         = apollo.StartLoginResp
	StartRegistrationReq   = apollo.StartRegistrationReq
	StartRegistrationResp  = apollo.StartRegistrationResp

	Passkeys interface {
		// 注册
		StartRegistration(ctx context.Context, in *StartRegistrationReq, opts ...grpc.CallOption) (*StartRegistrationResp, error)
		// FinishRegistration 注册第二步 - 完成
		FinishRegistration(ctx context.Context, in *FinishRegistrationReq, opts ...grpc.CallOption) (*FinishRegistrationResp, error)
		// 登录
		StartLogin(ctx context.Context, in *StartLoginReq, opts ...grpc.CallOption) (*StartLoginResp, error)
		// FinishLogin 登陆第二步 - 完成
		FinishLogin(ctx context.Context, in *FinishLoginReq, opts ...grpc.CallOption) (*FinishLoginResp, error)
	}

	defaultPasskeys struct {
		cli zrpc.Client
	}
)

func NewPasskeys(cli zrpc.Client) Passkeys {
	return &defaultPasskeys{
		cli: cli,
	}
}

// 注册
func (m *defaultPasskeys) StartRegistration(ctx context.Context, in *StartRegistrationReq, opts ...grpc.CallOption) (*StartRegistrationResp, error) {
	client := apollo.NewPasskeysClient(m.cli.Conn())
	return client.StartRegistration(ctx, in, opts...)
}

// FinishRegistration 注册第二步 - 完成
func (m *defaultPasskeys) FinishRegistration(ctx context.Context, in *FinishRegistrationReq, opts ...grpc.CallOption) (*FinishRegistrationResp, error) {
	client := apollo.NewPasskeysClient(m.cli.Conn())
	return client.FinishRegistration(ctx, in, opts...)
}

// 登录
func (m *defaultPasskeys) StartLogin(ctx context.Context, in *StartLoginReq, opts ...grpc.CallOption) (*StartLoginResp, error) {
	client := apollo.NewPasskeysClient(m.cli.Conn())
	return client.StartLogin(ctx, in, opts...)
}

// FinishLogin 登陆第二步 - 完成
func (m *defaultPasskeys) FinishLogin(ctx context.Context, in *FinishLoginReq, opts ...grpc.CallOption) (*FinishLoginResp, error) {
	client := apollo.NewPasskeysClient(m.cli.Conn())
	return client.FinishLogin(ctx, in, opts...)
}
