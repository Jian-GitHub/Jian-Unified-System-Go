syntax = "proto3";

package apollo;

option go_package = "./apollo";

// ========== 注册流程 ==========
message StartRegistrationReq {
  int64 user_id = 1;          // API生成
  string user_name = 2;       // API提供
  string display_name = 3;    // API提供
}

message StartRegistrationResp {
  bytes options_json = 1;     // WebAuthn标准选项
  bytes session_data = 2;     // 序列化的SessionData（API需存储）
}

message FinishRegistrationReq {
  int64 user_id = 1;          // 必须与StartRegistration一致
  bytes credential_json = 2;  // 前端返回的完整认证数据
  bytes session_data = 3;     // 新增：StartRegistration返回的session_data
}

message FinishRegistrationResp {
  bytes credential_id = 1;
  bytes public_key = 2;
}

// ========== 登录流程 ==========
message StartLoginReq {
//  int64 user_id = 1;          // API提供
//  string user_name = 2;       // API提供
//  string display_name = 3;    // API提供
//  bytes credentials_json = 4; // API查询的完整凭证列表
}

message StartLoginResp {
  bytes options_json = 1;
  bytes session_data = 2; // 必须返回给API存储
}

message FinishLoginReq {
  bytes credential_json = 1;  // 前端原始JSON
  bytes session_data = 2;    // StartLogin返回的session_data
}

message FinishLoginResp {
  int64 user_id = 1;          // 验证通过的用户ID
  bytes credential_id = 2;    // 使用的凭证ID（用于审计）
}

// ================= 服务定义 =================
service Passkeys {
  // 注册
  // StartRegistration 注册第一步 - 开始
  rpc StartRegistration (StartRegistrationReq) returns (StartRegistrationResp);
  // FinishRegistration 注册第二步 - 完成
  rpc FinishRegistration (FinishRegistrationReq) returns (FinishRegistrationResp);

  // 登录
  // StartLogin 登陆第一步 - 开始
  rpc StartLogin (StartLoginReq) returns (StartLoginResp);
  // FinishLogin 登陆第二步 - 完成
  rpc FinishLogin (FinishLoginReq) returns (FinishLoginResp);
}