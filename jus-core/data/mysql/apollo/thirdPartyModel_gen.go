// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package apollo

import (
	"context"
	"database/sql"
	"fmt"
	"jian-unified-system/jus-core/data/mysql/model"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	thirdPartyFieldNames          = builder.RawFieldNames(&ThirdParty{})
	thirdPartyRows                = strings.Join(thirdPartyFieldNames, ",")
	thirdPartyRowsExpectAutoSet   = strings.Join(stringx.Remove(thirdPartyFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	thirdPartyRowsWithPlaceHolder = strings.Join(stringx.Remove(thirdPartyFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheApolloThirdPartyIdPrefix      = "cache:apollo:thirdParty:id:"
	cacheApolloThirdPartyThirdIdPrefix = "cache:apollo:thirdParty:thirdId:"
)

type (
	thirdPartyModel interface {
		Insert(ctx context.Context, data *ThirdParty) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ThirdParty, error)
		FindBatch(ctx context.Context, userId int64) (*[]ThirdParty, error)
		FindOneByThirdID(ctx context.Context, id string) (*ThirdParty, error)
		Update(ctx context.Context, data *ThirdParty) error
		Delete(ctx context.Context, id int64) error
	}

	defaultThirdPartyModel struct {
		sqlc.CachedConn
		table string
	}

	ThirdParty struct {
		Id         int64          `db:"id"` // Third Party Account ID
		Provider   string         `db:"provider"`
		ThirdId    string         `db:"third_id"`
		UserId     int64          `db:"user_id"` // Apollo User ID
		Name       string         `db:"name"`
		CreateTime time.Time      `db:"create_time"`
		UpdateTime time.Time      `db:"update_time"`
		RawData    sql.NullString `db:"raw_data"`
	}
)

func newThirdPartyModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultThirdPartyModel {
	return &defaultThirdPartyModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`third_party`",
	}
}

func (m *defaultThirdPartyModel) Delete(ctx context.Context, id int64) error {
	apolloThirdPartyIdKey := fmt.Sprintf("%s%v", cacheApolloThirdPartyIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, apolloThirdPartyIdKey)
	return err
}

func (m *defaultThirdPartyModel) FindOne(ctx context.Context, id int64) (*ThirdParty, error) {
	apolloThirdPartyIdKey := fmt.Sprintf("%s%v", cacheApolloThirdPartyIdPrefix, id)
	var resp ThirdParty
	err := m.QueryRowCtx(ctx, &resp, apolloThirdPartyIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", thirdPartyRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, model.ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultThirdPartyModel) FindBatch(ctx context.Context, userId int64) (*[]ThirdParty, error) {
	var resp []ThirdParty

	query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 10", thirdPartyRows, m.table)
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query, userId)

	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, model.ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultThirdPartyModel) FindOneByThirdID(ctx context.Context, id string) (*ThirdParty, error) {
	apolloThirdPartyIdKey := fmt.Sprintf("%s%v", cacheApolloThirdPartyThirdIdPrefix, id)
	var resp ThirdParty
	err := m.QueryRowCtx(ctx, &resp, apolloThirdPartyIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `third_id` = ? limit 1", thirdPartyRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, model.ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultThirdPartyModel) Insert(ctx context.Context, data *ThirdParty) (sql.Result, error) {
	apolloThirdPartyIdKey := fmt.Sprintf("%s%v", cacheApolloThirdPartyIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, thirdPartyRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ThirdId, data.UserId, data.Name, data.RawData)
	}, apolloThirdPartyIdKey)
	return ret, err
}

func (m *defaultThirdPartyModel) Update(ctx context.Context, data *ThirdParty) error {
	apolloThirdPartyIdKey := fmt.Sprintf("%s%v", cacheApolloThirdPartyIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, thirdPartyRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ThirdId, data.UserId, data.Name, data.RawData, data.Id)
	}, apolloThirdPartyIdKey)
	return err
}

func (m *defaultThirdPartyModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheApolloThirdPartyIdPrefix, primary)
}

func (m *defaultThirdPartyModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", thirdPartyRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultThirdPartyModel) tableName() string {
	return m.table
}
