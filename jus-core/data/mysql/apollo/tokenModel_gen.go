// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.0

package apollo

import (
	"context"
	"database/sql"
	"fmt"
	"jian-unified-system/jus-core/data/mysql/model"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tokenFieldNames          = builder.RawFieldNames(&Token{})
	tokenRows                = strings.Join(tokenFieldNames, ",")
	tokenRowsExpectAutoSet   = strings.Join(stringx.Remove(tokenFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tokenRowsWithPlaceHolder = strings.Join(stringx.Remove(tokenFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheApolloTokenIdPrefix      = "cache:apollo:token:id:"
	cacheApolloTokenIdBatchPrefix = "cache:apollo:token:batch:id:"
)

type (
	tokenModel interface {
		Insert(ctx context.Context, data *Token) (sql.Result, error)
		FindOne(ctx context.Context, id int64, userId int64) (*Token, error)
		FindBatch(ctx context.Context, userId int64, page int64) (*[]Token, error)
		CountTokens(ctx context.Context, userId int64) (int64, error)
		Update(ctx context.Context, data *Token) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTokenModel struct {
		sqlc.CachedConn
		table string
	}

	Token struct {
		Id         int64          `db:"id"`
		UserId     int64          `db:"user_id"`
		Name       sql.NullString `db:"name"`
		Value      string         `db:"value"`
		CreateTime time.Time      `db:"create_time"`
		IsEnabled  int64          `db:"is_enabled"` // 0: disabled; 1: enabled
		IsDeleted  int64          `db:"is_deleted"`
	}
)

func newTokenModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTokenModel {
	return &defaultTokenModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`token`",
	}
}

func (m *defaultTokenModel) Delete(ctx context.Context, id int64) error {
	apolloTokenIdKey := fmt.Sprintf("%s%v", cacheApolloTokenIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, apolloTokenIdKey)
	return err
}

func (m *defaultTokenModel) FindOne(ctx context.Context, id int64, userId int64) (*Token, error) {
	apolloTokenIdKey := fmt.Sprintf("%s%v", cacheApolloTokenIdPrefix, id)
	var resp Token
	err := m.QueryRowCtx(ctx, &resp, apolloTokenIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? and `user_id` = ? and `is_enabled` = 1 and `is_deleted` = 0 limit 1", tokenRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id, userId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, model.ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTokenModel) FindBatch(ctx context.Context, userId int64, page int64) (*[]Token, error) {
	//apolloTokenIdKey := fmt.Sprintf("%s%v", cacheApolloTokenIdPrefix, id)
	var resp []Token
	err := m.QueryRowsNoCacheCtx(ctx, &resp, "", func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		offset := (page - 1) * 10
		query := fmt.Sprintf("select %s from %s where `user_id` = ? and `is_deleted` = 0 limit 10 OFFSET ?", tokenRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, userId, offset)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, model.ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTokenModel) CountTokens(ctx context.Context, userId int64) (int64, error) {
	var resp int64
	query := fmt.Sprintf("select COUNT(`id`) from %s where `user_id` = ? and `is_deleted` = 0 limit 1", m.table)
	err := m.QueryRowNoCacheCtx(ctx, &resp, query, userId)

	switch err {
	case nil:
		return 0, nil
	case sqlc.ErrNotFound:
		return 0, model.ErrNotFound
	default:
		return resp, err
	}
}

func (m *defaultTokenModel) Insert(ctx context.Context, data *Token) (sql.Result, error) {
	apolloTokenIdKey := fmt.Sprintf("%s%v", cacheApolloTokenIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, tokenRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.UserId, data.Name, data.Value, data.IsEnabled, data.IsDeleted)
	}, apolloTokenIdKey)
	return ret, err
}

func (m *defaultTokenModel) Update(ctx context.Context, data *Token) error {
	apolloTokenIdKey := fmt.Sprintf("%s%v", cacheApolloTokenIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tokenRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.Name, data.Value, data.IsEnabled, data.IsDeleted, data.Id)
	}, apolloTokenIdKey)
	return err
}

func (m *defaultTokenModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheApolloTokenIdPrefix, primary)
}

func (m *defaultTokenModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tokenRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTokenModel) tableName() string {
	return m.table
}
