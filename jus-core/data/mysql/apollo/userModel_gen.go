// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package apollo

import (
	"context"
	"database/sql"
	"fmt"
	"jian-unified-system/jus-core/data/mysql/model"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userFieldNames          = builder.RawFieldNames(&User{})
	userRows                = strings.Join(userFieldNames, ",")
	userRowsExpectAutoSet   = strings.Join(stringx.Remove(userFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userRowsWithPlaceHolder = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheApolloUserIdPrefix = "cache:apollo:user:id:"

	// NotificationInfo
	userNotificationInfoFieldNames          = builder.RawFieldNames(&UserNotificationInfo{})
	userNotificationInfoRows                = strings.Join(userNotificationInfoFieldNames, ",")
	cacheApolloUserNotificationInfoIdPrefix = "cache:apollo:user:notification:"
)

type (
	userModel interface {
		Insert(ctx context.Context, data *User) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*User, error)
		FindOneNotificationInfo(ctx context.Context, id int64) (*UserNotificationInfo, error)
		FindOneByEmail(ctx context.Context, email string) (*User, error)
		Update(ctx context.Context, data *User) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserModel struct {
		sqlc.CachedConn
		table string
	}

	User struct {
		Id                int64          `db:"id"`             // 雪花算法用户ID
		GivenName         string         `db:"given_name"`     // 名字
		MiddleName        string         `db:"middle_name"`    // 中间名
		FamilyName        string         `db:"family_name"`    // 姓氏
		Email             string         `db:"email"`          // 电子邮件 (登录凭证)
		Password          string         `db:"password"`       // SHA-512加密密码
		EmailVerified     int64          `db:"email_verified"` // false - 0true - 1
		Avatar            sql.NullString `db:"avatar"`         // 头像URL
		BirthdayYear      sql.NullInt64  `db:"birthday_year"`
		BirthdayMonth     sql.NullInt64  `db:"birthday_month"`
		BirthdayDay       sql.NullInt64  `db:"birthday_day"`
		NotificationEmail sql.NullString `db:"notification_email"`
		Locate            string         `db:"locate"`
		Language          string         `db:"language"`
		CreateTime        time.Time      `db:"create_time"`     // 创建时间
		LastLoginTime     time.Time      `db:"last_login_time"` // 最后登录时间
		UpdateTime        time.Time      `db:"update_time"`
		Mark              string         `db:"mark"` // 备注
	}
	UserNotificationInfo struct {
		Id                int64          `db:"id"`          // 雪花算法用户ID
		GivenName         string         `db:"given_name"`  // 名字
		MiddleName        string         `db:"middle_name"` // 中间名
		FamilyName        string         `db:"family_name"` // 姓氏
		Avatar            sql.NullString `db:"avatar"`      // 头像URL
		BirthdayYear      sql.NullInt64  `db:"birthday_year"`
		BirthdayMonth     sql.NullInt64  `db:"birthday_month"`
		BirthdayDay       sql.NullInt64  `db:"birthday_day"`
		NotificationEmail sql.NullString `db:"notification_email"`
		Locate            string         `db:"locate"`
		Language          string         `db:"language"`
		CreateTime        time.Time      `db:"create_time"`     // 创建时间
		LastLoginTime     time.Time      `db:"last_login_time"` // 最后登录时间
	}
)

func newUserModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserModel {
	return &defaultUserModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`user`",
	}
}

func (m *defaultUserModel) Delete(ctx context.Context, id int64) error {
	apolloUserIdKey := fmt.Sprintf("%s%v", cacheApolloUserIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, apolloUserIdKey)
	return err
}

func (m *defaultUserModel) FindOne(ctx context.Context, id int64) (*User, error) {
	apolloUserIdKey := fmt.Sprintf("%s%v", cacheApolloUserIdPrefix, id)
	var resp User
	err := m.QueryRowCtx(ctx, &resp, apolloUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, model.ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneNotificationInfo(ctx context.Context, id int64) (*UserNotificationInfo, error) {
	apolloUserIdKey := fmt.Sprintf("%s%v", cacheApolloUserNotificationInfoIdPrefix, id)
	var resp UserNotificationInfo
	err := m.QueryRowCtx(ctx, &resp, apolloUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userNotificationInfoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, model.ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByEmail(ctx context.Context, email string) (*User, error) {
	apolloUserIdKey := fmt.Sprintf("%s%v", cacheApolloUserIdPrefix, email)
	var resp User
	err := m.QueryRowCtx(ctx, &resp, apolloUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `email` = ? limit 1", userRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, email)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, model.ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) Insert(ctx context.Context, data *User) (sql.Result, error) {
	apolloUserIdKey := fmt.Sprintf("%s%v", cacheApolloUserIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.GivenName, data.MiddleName, data.FamilyName, data.Email, data.Password, data.EmailVerified, data.Avatar, data.BirthdayYear, data.BirthdayMonth, data.BirthdayDay, data.NotificationEmail, data.Locate, data.Language, data.LastLoginTime, data.Mark)
	}, apolloUserIdKey)
	return ret, err
}

func (m *defaultUserModel) Update(ctx context.Context, data *User) error {
	apolloUserIdKey := fmt.Sprintf("%s%v", cacheApolloUserIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.GivenName, data.MiddleName, data.FamilyName, data.Email, data.Password, data.EmailVerified, data.Avatar, data.BirthdayYear, data.BirthdayMonth, data.BirthdayDay, data.NotificationEmail, data.Locate, data.Language, data.LastLoginTime, data.Mark, data.Id)
	}, apolloUserIdKey)
	return err
}

func (m *defaultUserModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheApolloUserIdPrefix, primary)
}

func (m *defaultUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserModel) tableName() string {
	return m.table
}
