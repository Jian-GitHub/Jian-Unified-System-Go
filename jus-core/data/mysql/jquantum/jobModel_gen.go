// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package jquantum

import (
	"context"
	"database/sql"
	"fmt"
	"jian-unified-system/jus-core/data/mysql/model"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	jobFieldNames          = builder.RawFieldNames(&Job{})
	jobRows                = strings.Join(jobFieldNames, ",")
	jobRowsExpectAutoSet   = strings.Join(stringx.Remove(jobFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	jobRowsWithPlaceHolder = strings.Join(stringx.Remove(jobFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheJquantumJobIdPrefix = "cache:jquantum:job:id:"
)

type (
	jobModel interface {
		Insert(ctx context.Context, data *Job) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*Job, error)
		Update(ctx context.Context, data *Job) error
		UpdateState(ctx context.Context, id string, state int) error
		Delete(ctx context.Context, id string) error
	}

	defaultJobModel struct {
		sqlc.CachedConn
		table string
	}

	Job struct {
		Id         string        `db:"id"`         // Job UUID (string: xx-xx-xx-xx)
		UserId     int64         `db:"user_id"`    // Apollo User ID
		NumQubits  sql.NullInt64 `db:"num_qubits"` // num of quantum bits of quantum circuit
		NumGates   sql.NullInt64 `db:"num_gates"`  // num of gates of quantum circuit
		Status     int64         `db:"status"`     // Job status 0: queued; 1: processing; 2: finished; -1: error
		Deleted    int64         `db:"deleted"`    // Is deleted0: false1: true
		CreateTime time.Time     `db:"create_time"`
	}
)

func newJobModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultJobModel {
	return &defaultJobModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`job`",
	}
}

func (m *defaultJobModel) Delete(ctx context.Context, id string) error {
	jquantumJobIdKey := fmt.Sprintf("%s%v", cacheJquantumJobIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, jquantumJobIdKey)
	return err
}

func (m *defaultJobModel) FindOne(ctx context.Context, id string) (*Job, error) {
	jquantumJobIdKey := fmt.Sprintf("%s%v", cacheJquantumJobIdPrefix, id)
	var resp Job
	err := m.QueryRowCtx(ctx, &resp, jquantumJobIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", jobRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, model.ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultJobModel) Insert(ctx context.Context, data *Job) (sql.Result, error) {
	jquantumJobIdKey := fmt.Sprintf("%s%v", cacheJquantumJobIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, jobRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.UserId, data.NumQubits, data.NumGates, data.Status, data.Deleted)
	}, jquantumJobIdKey)
	return ret, err
}

func (m *defaultJobModel) Update(ctx context.Context, data *Job) error {
	jquantumJobIdKey := fmt.Sprintf("%s%v", cacheJquantumJobIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, jobRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.NumQubits, data.NumGates, data.Status, data.Deleted, data.Id)
	}, jquantumJobIdKey)
	return err
}

func (m *defaultJobModel) UpdateState(ctx context.Context, id string, state int) error {
	jquantumJobIdKey := fmt.Sprintf("%s%v", cacheJquantumJobIdPrefix, state)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set `status` = ? where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, state, id)
	}, jquantumJobIdKey)
	return err
}

func (m *defaultJobModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheJquantumJobIdPrefix, primary)
}

func (m *defaultJobModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", jobRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultJobModel) tableName() string {
	return m.table
}
